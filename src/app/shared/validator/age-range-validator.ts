import { ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';

/*
The function is actually a factory that takes min and max values to detect a specific age range and returns a validator function.
The ageCustomRangeValidator factory returns the configured validator function.
That function takes an Angular control object and returns either null if the control value is valid or a validation error object.
The validation error object typically has a property whose name is the validation key, 'ageCustomRange',
 and whose value is an arbitrary dictionary of values that you could insert into an error message, {name}.
*/

// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
export function ageCustomRangeValidator(min: number, max: number): ValidatorFn {
  return (control: AbstractControl): { [key: string]: any } | null => {
    const isValidAge = control.value && control.value >= min && control.value < max;
    // An object containing any errors generated by failing validation, or null if there are no errors.
    return isValidAge ? null : { ageRange: { value: control.value } };
  };
}

/*
That function takes an Angular control object and returns either null if the control value is valid or a validation error object.
The validation error object typically has a property whose name is the validation key, 'ageRange',
 and whose value is an arbitrary dictionary of values that you could insert into an error message, {name}.
*/

// export function ageRangeValidator(control: AbstractControl): ValidationErrors | null {
export const ageRangeValidator = (control: AbstractControl): ValidationErrors | null => {
  const isValidAge = control.value && control.value >= 20 && control.value < 30;
  // An object containing any errors generated by failing validation, or null if there are no errors.
  return isValidAge ? null : { ageRange: { value: control.value } };
};
